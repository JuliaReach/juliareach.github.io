[{"authors":null,"categories":null,"content":"Born in Uruguay (Montevideo, 1988), I graduated in Physics from Univ. de la República (Facultad de Ciencias), and in Electrical Engineering (Facultad de Ingeniería). I moved to France for a PhD in Mathematics and Informatics (Univ. Joseph Fourier, 2013-2015), writing a thesis on the quantum random walk, a mathematical model of particular interest in Quantum Computing.\nI\u0026rsquo;m a former post-doc researcher at VERIMAG laboratory of Université Grenoble Alpes (2016-2017), a leading French research center in embedded systems that are used in diverse disciplines such as avionics/aeronautics, space, transport, automotive, telecommunications, smart cards and consumer electronics. As an Applied Mathematician, my research has to do with developing innovative numerical tools that impact decisions regarding reliability, correctness and safety of systems. I specialize on formal verification of Cyber-Physical Systems (CPS), hybrid dynamical systems, and robustness analysis of neural networks.\nIf you are interested to discuss, get in touch! You can email me to mforets at gmail.com.\n","date":1612546162,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1612546162,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Born in Uruguay (Montevideo, 1988), I graduated in Physics from Univ. de la República (Facultad de Ciencias), and in Electrical Engineering (Facultad de Ingeniería). I moved to France for a PhD in Mathematics and Informatics (Univ.","tags":null,"title":"Marcelo Forets","type":"authors"},{"authors":null,"categories":null,"content":"Christian Schilling is a computer scientist interested in analysis, formal verification, and synthesis of dynamical, cyber-physical, and software systems, and explainable artificial intelligence. Currently working at the University of Konstanz, Germany, received his Ph.D. degree under supervision of Andreas Podelski from the University of Freiburg, Germany, in 2018. Former postdoctoral fellow with Thomas A. Henzinger at IST Austria.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"9e56f752d974ea87219b284ef6178229","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Christian Schilling is a computer scientist interested in analysis, formal verification, and synthesis of dynamical, cyber-physical, and software systems, and explainable artificial intelligence. Currently working at the University of Konstanz, Germany, received his Ph.","tags":null,"title":"Christian Schilling","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"d4c9823dac39d787428220d0fd3222b2","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"","tags":null,"title":"Daniel Freire Caporale","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"de191098a4a009447b88b4c020d51658","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"","tags":null,"title":"David P. Sanders","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"49330e8e0b51e25fe58a56e7557b5ccd","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"","tags":null,"title":"Luis Benet","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2f0a565792c3cdcb13b95e7ca111f701","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"","tags":null,"title":"Sebastian Guadalupe","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://juliareach.github.io/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["Marcelo Forets"],"categories":[],"content":"\u0026laquo; WORK-IN-PROGRESS\u0026raquo;\nContext Let an initial-value problem be specified as follows:\n$$ y'(t) = f(t, y),\\qquad y(t_0) = y_0.\\qquad (1) $$ Here $y \\in \\mathbb{R}^m$ is an unknown function of time $t$.\nWe will consider a naive Julia implementation of the famous fourth-order explicit Runge-Kutta integration method. The idea is to use such method to solve (1) for the case when $y_0$ is defined symbolically in the sense that we replace $y_0$ by $y_0 + \\xi$ where $\\xi$ is a vector of $m$ \u0026ldquo;symbols\u0026rdquo;. We would like to evaluate how does the classic RK4 method propagate the $\\xi$ and see what information can be extracted from such expansion.\nIn this method, given a step size $h \u0026gt; 0$ we compute for each $n = 0, 1, 2, \\ldots, N$ a sequence $y_1, y_2, \\ldots, y_N$ using an explicit scheme of the form $y_{n+1} = y_n + h \\sum_{i=1}^s b_i k_i$, where the $k_i$ are obtained by evaluating $f(t, y)$ on intermediate points. In the case of RK4 one step of the algorithm is obtained with the following step function.\nfunction step!(f, y, n, t, h) k₁ = f(t[n], y[n]) k₂ = f(t[n] + h/2, y[n] + h*k₁/2) k₃ = f(t[n] + h/2, y[n] + h*k₂/2) k₄ = f(t[n] + h, y[n] + h*k₃) y[n+1] = y[n] + (h/6) * (k₁ + 2k₂ + 2k₃ + k₄) t[n+1] = t[n] + h end  step! (generic function with 1 method)  function solve(f, h, t₀, T, y₀) N = round(Int, (T - t₀) / h) t = Vector{Float64}(undef, N) y = Vector{typeof(y₀)}(undef, N) y[1] = y₀; t[1] = t₀; for n in 1:N-1 step!(f, y, n, t, h) end y, t end  solve (generic function with 1 method)  Example Consider the quadratic ODE\n$$ y'(t) = 1 - y^2,\\qquad y(t_0) = 0,~~ t \\in [0, 10]. $$\nWe consider a step size $h = 0.01$.\nf_quad(t, y) = 1 - y^2  f_quad (generic function with 1 method)  r, t = solve(f_quad, 0.01, 0.0, 10.0, 0.0);  using Plots  plot(t, r, seriestype=:line, lab=\u0026quot;\u0026quot;, xlab=\u0026quot;t\u0026quot;, ylab=\u0026quot;y(t)\u0026quot;)  Now suppose that we solve the recurrence with an initial state $u_0 + \\xi$.\nusing TaylorSeries  ξ = Taylor1(20) set_taylor1_varname(\u0026quot;ξ\u0026quot;) u0 = 0.0 u0ξ = u0 + ξ   1.0 ξ + 𝒪(ξ²¹)  y, t = solve(f_quad, 0.01, 0.0, 10.0, u0ξ); length(y)  1000  y[1]   1.0 ξ + 𝒪(ξ²¹)  y[2]   0.009999666679166094 + 0.99990000666625 ξ - 0.009998666787493126 ξ² + 9.998333499990624e-5 ξ³ - 9.997958521864687e-7 ξ⁴ + 9.997916857282813e-9 ξ⁵ - 9.581395992702446e-11 ξ⁶ + 8.331729276038803e-13 ξ⁷ - 6.821796933983367e-15 ξ⁸ + 4.8430989824216484e-17 ξ⁹ - 2.968450528059874e-19 ξ¹⁰ + 1.5103098972005213e-21 ξ¹¹ - 6.119511719889326e-24 ξ¹² + 1.9530794270833342e-26 ξ¹³ - 4.557259114583335e-29 ξ¹⁴ + 6.510416666666671e-32 ξ¹⁵ - 4.069010416666671e-35 ξ¹⁶ + 𝒪(ξ²¹)  y[3]   0.019997333758263312 + 0.9996001066422828 ξ - 0.019989336973987328 ξ² + 0.0003997334431869484 ξ³ - 7.993594720222507e-6 ξ⁴ + 1.5985124640472037e-7 ξ⁵ - 3.1883090638671063e-9 ξ⁶ + 6.325950825886493e-11 ξ⁷ - 1.2462287616432512e-12 ξ⁸ + 2.4312653056785857e-14 ξ⁹ - 4.687998642014969e-16 ξ¹⁰ + 8.919632391826903e-18 ξ¹¹ - 1.672458814319322e-19 ξ¹² + 3.08748726849809e-21 ξ¹³ - 5.608112595223544e-23 ξ¹⁴ + 1.0018858671317283e-24 ξ¹⁵ - 1.7600522287738262e-26 ξ¹⁶ + 3.040358425374431e-28 ξ¹⁷ - 5.164849498520435e-30 ξ¹⁸ + 8.629961159714198e-32 ξ¹⁹ - 1.4187146313423383e-33 ξ²⁰ + 𝒪(ξ²¹)  y[4]   0.029991003236316215 + 0.9991005397242128 ξ - 0.02996402754525644 ξ² + 0.000898651247751589 ξ³ - 2.6951439926918567e-5 ξ⁴ + 8.083018387635607e-7 ξ⁵ - 2.4229420975103902e-8 ξ⁶ + 7.255492265663734e-10 ξ⁷ - 2.169261345744115e-11 ξ⁸ + 6.471370059589956e-13 ξ⁹ - 1.9250541717144024e-14 ξ¹⁰ + 5.706694617811968e-16 ξ¹¹ - 1.6849037837381005e-17 ξ¹² + 4.952171150219145e-19 ξ¹³ - 1.4482976068740724e-20 ξ¹⁴ + 4.213120613390775e-22 ξ¹⁵ - 1.2187249982451306e-23 ξ¹⁶ + 3.504794249260267e-25 ξ¹⁷ - 1.0018397840714965e-26 ξ¹⁸ + 2.846156443714574e-28 ξ¹⁹ - 8.035424335081523e-30 ξ²⁰ + 𝒪(ξ²¹)  y[5]   0.03997868030782012 + 0.9984017051196238 ξ - 0.03991478262103181 ξ² + 0.0015957403355221493 ξ³ - 6.379557597746384e-5 ξ⁴ + 2.550464580022681e-6 ξ⁵ - 1.0194784965344293e-7 ξ⁶ + 4.073770468253297e-9 ξ⁷ - 1.6270188569216327e-10 ξ⁸ + 6.4933229278608814e-12 ξ⁹ - 2.588889266950159e-13 ξ¹⁰ + 1.0309124077397989e-14 ξ¹¹ - 4.099036112193993e-16 ξ¹² + 1.6269963041530542e-17 ξ¹³ - 6.445181115936467e-19 ξ¹⁴ + 2.5476149615176444e-20 ξ¹⁵ - 1.0046100402336236e-21 ξ¹⁶ + 3.9513947849926016e-23 ξ¹⁷ - 1.549979598640151e-24 ξ¹⁸ + 6.062710831558582e-26 ξ¹⁹ - 2.3644194573304648e-27 ξ²⁰ + 𝒪(ξ²¹)  The result is a sequence of polynomials in $\\xi$. However such characterization is only useful for small deviations with respect to the initial state \u0026ndash; and we haven\u0026rsquo;t yet characterized the error of the approximation. For example, suppose that we are interested in $y(t = 1)$:\nt[100]  0.9900000000000007  y[100]   0.7573623240820949 + 0.4264023097949346 ξ - 0.3229410443236415 ξ² + 0.24458338018660747 ξ³ - 0.1852382373895675 ξ⁴ + 0.14029246208258747 ξ⁵ - 0.10625222517422822 ξ⁶ + 0.08047143220209468 ξ⁷ - 0.06094603090212832 ξ⁸ + 0.046158227586616425 ξ⁹ - 0.03495850249638864 ξ¹⁰ + 0.026476252672553414 ξ¹¹ - 0.02005211623341677 ξ¹² + 0.015186717331102878 ξ¹³ - 0.01150184751249755 ξ¹⁴ + 0.008711065944387024 ξ¹⁵ - 0.006597433131544507 ξ¹⁶ + 0.004996647273657277 ξ¹⁷ - 0.003784272377387678 ξ¹⁸ + 0.0028660653096264452 ξ¹⁹ - 0.0021706498720577556 ξ²⁰ + 𝒪(ξ²¹)  We can evaluate this result at $\\xi = 0$:\nevaluate(y[100], 0.0)  0.7573623240820949  At a value $\\xi = 0.1$\nevaluate(y[100], 0.1)  0.7970005083277867  And also an interval:\nusing IntervalArithmetic evaluate(y[100], -0.1 .. 0.1)  [0.711228, 0.800249]  Flowpipe using ReachabilityAnalysis const RA = ReachabilityAnalysis  ReachabilityAnalysis  @taylorize function _f_quad(du, u, p, t) du[1] = 1 - u[1]^2 end prob = @ivp(x' = _f_quad(x), dim=1, x(0) ∈ -0.1 .. 0.1); sol = RA.solve(prob, tspan=(0.0, 10.0), alg=TMJets(abs_tol=1e-12));  plot(sol, vars=(0, 1), alpha=.2) plot!(t, r, seriestype=:line, lab=\u0026quot;\u0026quot;)  R = sol(1.0)  TaylorModelReachSet{Float64}(TaylorModels.TaylorModel1{TaylorN{Float64},Float64}[ 0.7549628871907649 + 0.043003103896458415 x₁ - 0.0032465747475834863 x₁² + ( 0.4300310389645844 - 0.06493149495166935 x₁ + 0.003052819945102918 x₁²) ξ + ( - 0.32465747475834694 + 0.03052819945102888 x₁ + 0.0018836179755100605 x₁²) ξ² + ( 0.101760664836763 + 0.012557453170067179 x₁ - 0.00480650040545221 x₁²) ξ³ + ( 0.03139363292516797 - 0.024032502027261038 x₁ + 0.0027912209062894602 x₁²) ξ⁴ + ( - 0.048065004054522104 + 0.011164883625157804 x₁ + 0.0006981330083023078 x₁²) ξ⁵ + ( 0.018608139375263018 + 0.0023271100276743783 x₁ - 0.0020517845820511183 x₁²) ξ⁶ + ( 0.0033244428966776847 - 0.005862241663003196 x₁ + 0.001163377855574074 x₁²) ξ⁷ + ( - 0.007327802078754001 + 0.0029084446389351804 x₁ + 0.0001265493671184609 x₁²) ξ⁸ + [-3.86101e-14, 3.14375e-14]], [0.984396, 1.02463])  tspan(R)  [0.984396, 1.02463]  Z = polynomial.(set(R))  1-element Array{Taylor1{TaylorN{Float64}},1}: 0.7549628871907649 + 0.043003103896458415 x₁ - 0.0032465747475834863 x₁² + 𝒪(‖x‖³) + ( 0.4300310389645844 - 0.06493149495166935 x₁ + 0.003052819945102918 x₁² + 𝒪(‖x‖³)) ξ + ( - 0.32465747475834694 + 0.03052819945102888 x₁ + 0.0018836179755100605 x₁² + 𝒪(‖x‖³)) ξ² + ( 0.101760664836763 + 0.012557453170067179 x₁ - 0.00480650040545221 x₁² + 𝒪(‖x‖³)) ξ³ + ( 0.03139363292516797 - 0.024032502027261038 x₁ + 0.0027912209062894602 x₁² + 𝒪(‖x‖³)) ξ⁴ + ( - 0.048065004054522104 + 0.011164883625157804 x₁ + 0.0006981330083023078 x₁² + 𝒪(‖x‖³)) ξ⁵ + ( 0.018608139375263018 + 0.0023271100276743783 x₁ - 0.0020517845820511183 x₁² + 𝒪(‖x‖³)) ξ⁶ + ( 0.0033244428966776847 - 0.005862241663003196 x₁ + 0.001163377855574074 x₁² + 𝒪(‖x‖³)) ξ⁷ + ( - 0.007327802078754001 + 0.0029084446389351804 x₁ + 0.0001265493671184609 x₁² + 𝒪(‖x‖³)) ξ⁸ + 𝒪(ξ⁹)  using LazySets using LazySets: Interval  out = [Singleton([ti]) × Interval(evaluate(yi, -0.1 .. 0.1)) for (ti, yi) in zip(t, y)];  plot(out, marker=:x)  plot!(sol, vars=(0, 1), alpha=.2)  plot(sol[1:30], vars=(0, 1), alpha=.2, c=:lightblue) plot!(out[1:100], marker=:x, c=:red)  ","date":1612546162,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1612546162,"objectID":"5c2133a1cdc2fd27a97bc3ffa27f407b","permalink":"https://juliareach.github.io/post/rk4_taylorseries/","publishdate":"2021-02-05T14:29:22-03:00","relpermalink":"/post/rk4_taylorseries/","section":"post","summary":"\u0026laquo; WORK-IN-PROGRESS\u0026raquo;\nContext Let an initial-value problem be specified as follows:\n$$ y'(t) = f(t, y),\\qquad y(t_0) = y_0.\\qquad (1) $$ Here $y \\in \\mathbb{R}^m$ is an unknown function of time $t$.","tags":["Reachability"],"title":"Taylor expanding ODE solutions","type":"post"},{"authors":null,"categories":null,"content":"","date":1612137600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1612137600,"objectID":"959439f4ae8b854f99fb6b908943d1e5","permalink":"https://juliareach.github.io/software/reachabilityanalysis/","publishdate":"2021-02-01T00:00:00Z","relpermalink":"/software/reachabilityanalysis/","section":"software","summary":"Methods to compute sets of states reachable by dynamical systems","tags":null,"title":"ReachabilityAnalysis.jl","type":"software"},{"authors":null,"categories":null,"content":"","date":1611705600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1611705600,"objectID":"8b6a24b92a56d8dfa76fec77371c89b4","permalink":"https://juliareach.github.io/software/lazysets/","publishdate":"2021-01-27T00:00:00Z","relpermalink":"/software/lazysets/","section":"software","summary":"A Julia package for calculus with convex sets","tags":null,"title":"LazySets.jl","type":"software"},{"authors":null,"categories":null,"content":"Publication Efficient reachability analysis of parametric linear hybrid systems with time-triggered transitions. Marcelo Forets, Daniel Freire, Christian Schilling, 2020. arXiv: 2006.12325.\nPresented in MEMOCODE'20: 18th ACM-IEEE International Conference on Formal Methods and Models for System Design .\nAbstract Efficiently handling time-triggered and possibly nondeterministic switches for hybrid systems reachability is a challenging task. In this paper we focus on periodically controlled systems with fast-switching controller dynamics, which often require simulation time scales of the order of nanoseconds. Accurate set-based computations for such systems with relatively large time horizons are expensive due to the accumulation of errors in the discrete transitions. We present an approach based on conservative set-based enclosure of the dynamics that can handle systems with uncertain parameters and inputs. We demonstrate our algorithm on the plant model of an experimental electro-mechanical braking system with periodic controller.\nContributions Timed systems play an important role in modeling and analyzing cyber-physical systems. In this work we consider a class of hybrid-automaton models with continuous dynamics and time-triggered discrete events following a periodic clock. We propose a reachability framework to compute an overapproximation of the states reachable by such systems.\nConventional techniques tightly integrate the computation of the continuous behavior and the discrete events. Our approach allows to separate these concerns for the model class considered here, which simplifies the analysis drastically in practice and allows us to plug in any reachability algorithm from the literature.\nAs a case study, we consider a parametric model of a cyber-physical system consisting of an experimental electro-mechanical brake and a software-implemented periodic controller. The model was originally described in earlier work by Strathmann and Oehlerking where the authors developed a simplified version of a nonlinear system. The model is representative of real challenges in the automotive industry and allows the application of formal methods during development. Computing the reachable states for this simplified model takes twelve hours using the previous approach, and less than a minute with our approach.\nThis paper makes the following original contributions:\n  We present an efficient algorithm for deterministic periodic time-triggered hybrid systems with uncertain parameters of the system dynamics or the initial conditions.\n  We extend the algorithm to the more difficult and new scenario of nondeterministic periodic discrete switches.\n  We demonstrate the efficiency of our algorithm on a model of an electro-mechanical brake system.\n  Presentation   Presentation slides (pdf) are available here.\n  A short video for MEMOCODE'20 is available here.\n  How to cite @article{forets2020efficient, title={Efficient reachability analysis of parametric linear hybrid systems with time-triggered transitions}, author={Forets, Marcelo and Freire, Daniel and Schilling, Christian}, journal={arXiv preprint arXiv:2006.12325}, year={2020} }  ","date":1590969600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590969600,"objectID":"62385185e2434755413066a027acea84","permalink":"https://juliareach.github.io/project/timetrigger/","publishdate":"2020-06-01T00:00:00Z","relpermalink":"/project/timetrigger/","section":"project","summary":"by Marcelo Forets, Daniel Freire, Christian Schilling, 2020.","tags":["Reachability","Hybrid systems","Periodic controller"],"title":"Efficient reachability analysis of parametric linear hybrid systems with time-triggered transitions","type":"project"},{"authors":null,"categories":null,"content":"","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577836800,"objectID":"88872e52325d54ded5a39acf8e365fd8","permalink":"https://juliareach.github.io/software/rangeenclosures/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/software/rangeenclosures/","section":"software","summary":"A Julia package to compute Bernstein coefficients of multivariate polynomials","tags":null,"title":"RangeEnclosures.jl","type":"software"},{"authors":null,"categories":null,"content":"","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577836800,"objectID":"c1cb1c54d86495d4636fada5a395688a","permalink":"https://juliareach.github.io/software/reachabilitymodels/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/software/reachabilitymodels/","section":"software","summary":"A library of reachability models","tags":null,"title":"ReachabilityModels.jl","type":"software"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \n A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/media/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}   Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://juliareach.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"","date":1546300800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1546300800,"objectID":"7aaf37253d7268ccc83f51209d22a65b","permalink":"https://juliareach.github.io/software/neuralnetworkanalysis/","publishdate":"2019-01-01T00:00:00Z","relpermalink":"/software/neuralnetworkanalysis/","section":"software","summary":"Methods to verify neural network control systems using reachability analysis","tags":null,"title":"NeuralNetworkAnalysis.jl","type":"software"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"fc40296106e4609cf2e8e77b9e55bc41","permalink":"https://juliareach.github.io/software/mathematicalsystems/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/software/mathematicalsystems/","section":"software","summary":"Systems definitions in Julia","tags":null,"title":"MathematicalSystems.jl","type":"software"},{"authors":null,"categories":null,"content":"","date":1136073600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1136073600,"objectID":"3bf56fe54fe6b655748274956cb421c0","permalink":"https://juliareach.github.io/software/bernsteinexpansions/","publishdate":"2006-01-01T00:00:00Z","relpermalink":"/software/bernsteinexpansions/","section":"software","summary":"A Julia package to compute Bernstein coefficients of multivariate polynomials","tags":null,"title":"BernsteinExpansions.jl","type":"software"},{"authors":null,"categories":null,"content":"","date":1104537600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1104537600,"objectID":"5ee385644754194fea39a234f4e8ca11","permalink":"https://juliareach.github.io/software/mathematicalpredicates/","publishdate":"2005-01-01T00:00:00Z","relpermalink":"/software/mathematicalpredicates/","section":"software","summary":"Predicate definitions in Julia","tags":null,"title":"MathematicalPredicates.jl","type":"software"}]